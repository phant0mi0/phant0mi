# Создание
а = 'привет' # Одинарные кавычки
b = "привет" # Двойные кавычки
с = "я знаю' Python" # Комбинированные кавычки
d = 'я "знаю" Python' # Можно и так • = 'я "знаю" Python" # А так нельзя (кавычки вперемешку)

а = 123 # целочисленный тип
a = str('a') # Результат, '123'
str([1, 1.1, 'a']) # Результат, "[1, 1.1, 'a']"
str(True) # Peзультат, 'True'
str(None) # Peзультат, 'None'

а = 'привет!'
b = 'Иван'
c = f"{a} я {b}" # "привет я Иван"

# Получение
a = 'привет'
print(a)
print('Иван')


a = 'привет'
a[0] # 'n'
a[1] # 'p'
a[2] # 'n'
a[3] # 'B'
a[4] # 'e'
a[5] # 'T'
[6] # Ошибка, вышли за границы
a[-1] # 'T'
a[-2] # 'e'
a[-3] # 'B'
a[-4] # 'n'
a[-5] # 'p'
a[-6] # 'n'
а[-7] # Ошибка, вышли за границы

# Изменение
a = "привет"
a[0] = 'б' # Хотели получить "привет", а получили ошибку, что строку нельзя изменять
а = 'привет' # Для изменения придется полностью присвоить новое значение
# Удаление
а = 'привет'
del a[0] # Ошибка, элемент у строки не удалить
del a # Полное удаление переменной "а"

# Действие с объектами

а = 'привет'
b = 'Мир'
c=a+b
print(c) # 'приветМир'
c += b # 'приветМирМир'

a = "привет"
b = 2
c = a * b
print(c) # 'приветпривет'
а *= b # "а" равно 'привет привет'

a ='' # Две одинарные кавычки
b = "" # Две двойные кавычки
c = str()

# Методы
a = 'привет Мир'
a.count('p') # 2. Сколько раз р встречается в 'привет мир'
a.find('вет') # 3. На каком индексе в "привет мир начинается первое вхождение слова 'вет'. Если такого слова нет, то вернёт -1.
a.index('вет') # 3. На каком индексе в 'привет мир' начинается первое вхождение слова 'вет'. Если такого слова нет, то вернёт ошибку ValueError: substring not found
a.rfind('p') # 9. На каком индексе в 'привет мир' начинается последнее вхождение слова 'р'. Если такого слова нет, то вернёт-1.
a.rindex ('p') # 9. На каком индексе в 'привет мир' начинается последнее вхождение слова 'р'. Если такого слова нет, то вернёт ошибку ValueError: substring not found

a.removeprefix('пр') # ивет Мир". Если 'привет Мир' начинается на 'пр', то удаляет это пр, иначе возвращает первоначальное значение привет Мир
a.removesuffix('ир') # 'привет М'. Если 'привет Мир' заканчивается на 'ир', то удаляет это 'ир', иначе возвращает первоначальное значение привет Мир.
a.replace('p', 'P') # 'привет МиР'. Заменяет выбранные символы на нужные. Если передать 3-ий параметр, то будет служить как ограничение на число замен (отсчитывается с начала строки).
a.replace('p', 'P', 1) # 'пPивет MиР'.
a.capitalize() # 'Привет мир'. Строка начинается с заглавной буквы.
a.lower() # 'привет мир'. Все символы в строке приводятся к нижнему регистру. Аналогичный метод casefold().
a.upper() # 'ПРИВЕТ МИР'. Все символы в строке приводятся к верхнему регистру.
a.swapcase() # 'ПРИВЕТ мИР'. Все символы в строке меняют регистр на противоположный.

'привет'.isalpha() # True. Проверяет, что каждый символ в строке является буквой.
'привет мир'.isalpha() # False. Так как пробел не буква, тоже будет и при встрече с цифрой.
'123'.isdigit() # True. Проверяет, что каждый символ в строке является цифрой. Аналогично работает isdecimal(), isnumeric().
'123abc'.isalnum() # True. Проверяет, что каждый символ в строке является цифрой или буквой.
'привет'.isascii() # True. Проверяет что каждый символ в строке является аѕсії символом (латиница, цифры и специальные символы, но кириллица не является ascii).
'\n\t\r'.isspace() # True. Проверяет, что каждый символ в строке символом разделения (пробел, \n, \t, \r).
'123\n'.isprintable() # False. Проверяет, что каждый символ отобразится в консоли (print())
'Привет мир'.istitle() # True. Проверяет, что строка начинается с заглавной буквы.
'привет мир'.islower() # True. Проверяет, что каждый символ в нижнем регистре.
'ПРИВЕТ МИР'.isupper() # True. Проверяет, что каждый символ в верхнем регистре.

'int'.isidentifier() # True. Проверяет, что строка является зарезервированным словом в Python (int, str, bool, None, True, False, и т.д.).
'привет мир'.startswith('пр') # True Проверяет, что строка начинается с 'пр'.
'привет мир'.endswith('мир') # True. Проверяет, что строка заканчивается на 'мир'.

'\t привет \n'.strip() # 'привет'. Удаляет пробелы и непечатаемые символы слева и справа от текста.
'ww привет ww'.strip('w') # 'привет'. Если передать значение, то будет пытаться удалить его слева и справа, как 'w'.
'ww привет ww'.rstrip('w') # 'ww привет' Удаляет символы справа.
'ww привет ww'.istrip('w') # 'привет ww'. Удаляет символы слева.
'привет мир'.partition('и') # (пр', 'и', 'вет мир'). Разбивает строку по символу или слову. Разбивает по первому вхождению.
'привет мир'.rpartition('и') # (привет м', 'и', 'p'). Разбивает по последнему вхождению.

'www \t привет \n www'.split() # ['www', 'привет', 'www']. Разделяет строку по пробеллам и непечатаемым символам, трансформируя в список строк.
'www_привет_www'.split() # ['www', 'привет', 'www']. Если передать символ или строку, то произведёт разделение по нему.
'www_привет_www'.rsplit('', 1) # ['www.привет', 'www']. Разделяет по символу начиная справа. Второй параметр отвечает за то, сколько раз разделять строку.
а = ['www','привет','мир']
'-'.join(a) #'www-привет-мир'. Подставляет символ слева от join между строками в списке.
'abc'.encode() # b'abc'. Метод encode() вернет закодированную версию строки "абс как объект байтов. Используют когда строку нужно передать в байтовом виде.

# Практические моменты
a = 'winпривет\tw миp'.split()# ['W', 'привет', 'W', 'мир']
'_'.join(a) # 'w_привет_w_мир'

a = input('Введи данные разделенные пробелом').split() # Так как результат input будет строка, то к этой строке можно сразу применить строковый метод split(). Как пример если бы при выполнении кода ввести в консоль привет мир, то эти данные считаются и трансформируются в список ['привет', 'мир']