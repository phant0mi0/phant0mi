# Создание

a = [1, 1.1, 'a', [1], (1, 1.1), {1, 2}, {'a':1}, None, True] # Список в котором: целое; вещественное; строковое; другой список; кортеж; множество; словарь; пустой тип; булевый тип.

a = [] # Пустой список
b = list() # Пустой список

а = (1, 2.1, 3) # Раньше я был кортежем
list(a) # [1, 2.1, 3], но 'а' остался кортежем
b = list('abc') # ['а', 'b', 'с']

# Получение

a = [1, 1.1, 'a']
print(a)# [1, 1.1, 'a']
print([1, 1.1, 'a']) # [1, 1.1, 'a']

a = [1, 1.1, 'a']
a[0] #1
a[1] #1.1
a[2] # 'a'
a[3] # Ошибка, вышли за границы
a[-1] # 'a'
a[-2] # 1.1
a[-3] #1
a[-4] # Ошибка, вышли за границы >>> a = [1, 2, 3]
a.index(3) # 2. Возвращает индекс, где передаваемое значение стоит в списке. В примере вернётся 2, так как значение 3 в списке стоит на 2-ом индексе.

# Изменение

a = [1, 1.1, 'a']
a[0] = 'a' # Teneрь 'a' равно ['a', 1.1, 'a']
a[1] = '6' # Teneрь 'a' равно ['a', 'б', 'a']
a[-1] = 'B' # Tenерь 'a' равно ['a', '6', 'B']
а = [1, 2, 3] # Теперь 'а' равно [1, 2, 3]

# Добавление

a = [1, 2, 3]
a.append(4) # Добавляет значение (объект) в конец списка. Добавляет только один объект или значение. Теперь "а" [1, 2, 3, 4]
a.append(['a', 'b']) # Tenepь 'a' [1, 2, 3, 4, ['а', '"']]. Не забываем, что методы в списке изменяют значения и структуру в самом списке.
a = [1, 2, 3]
a.insert(0,4) # Добавляет значение (объект), что стоит на втором месте (4) на место под индексом, что стоит на первом месте (0). В конкретном примере добавит 4 на 0-ой индекс, т.е. вначало. Теперь 'а' [4, 1, 2, 3]
a = [1, 2, 3]
a.insert(3, 4) # В конкретном примере добавит 4 на 3-ий индекс, т.е. вконец. Теперь "a" [1, 2, 3, 4].
a = [1, 2, 3]
a.insert(-1, 4) # Кажется, что здесь должно значение 4 добавиться в конец, но на самом деле 4 встанет в предпоследнее место. Теперь 'а' [1, 2, 4, 3].
a = [1, 2, 3]
a.extend ([4, 5, 6]) # Добавляет данные в список поэлементно. Теперь 'а' [1, 2, 3, 4, 5, 6]

# Удаление

a = [1, 1.1, 'a']
del a[0] # Теперь 'а' равно [1.1, 'а']
del a[-1] # Теперь 'а' равно [1.1]
del a[-1] # Теперь 'а' равно []
del a # Полное удаление переменной 'а'

# Удаление (методы)

a = [1, 2, 3]
a.clear() # Полностью очищает список, превращая его в пустой список. Теперь 'а'[]
a = [1, 2, 3]
a.pop() # Возвращает последний элемент и удаляет его из списка. В примере вернёт 3 и удалит его из списка. Теперь 'а' [1, 2]
a = [1, 'ab', 3]
a.pop(1) # Возвращает элемент по указанному ИНДЕКСУ и удаляет его из списка. В примере вернёт 'ab' и удалит его из списка. Теперь "а" [1, 3]. Если такого индекса нет, то возникнет ошибка IndexError: pop index out of range
a = [1, 2, 'ab']
a.remove('ab') # Удаляет элемент по указанному ЗНАЧЕНИЮ из списка. Если данного значения нет, то появится ошибка. Теперь 'а' [1, 2]. Если такого значения нет, то возникнет ошибка ValueError: list.remove(x): х not in list

# Действия с объектами

a = [1, 2, 3]
b = [4, 5, 6]
c = a + b
print(c) # '[1, 2, 3, 4, 5, 6]'
a += b # Teпepь 'a' равно '[1, 2, 3, 4, 5, 6]'

a = [1, 2, 3]
b = 2
c = a * b
print(c) # [1, 2, 3, 1, 2, 3]
a *= b # Теперь "а" равно [1, 2, 3, 1, 2, 3]

a = [1, 2, 3] # Это одномерный список
b = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] # Это двумерный (список в списке) список. Его можно представить как:
#[[1, 2, 3],
#[4, 5, 6],
#[7, 8, 9]]


b = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
b[0] # Получение 1-го списка [1, 2, 3]
b[0][0] # Получение 1-го элемента "1" из 1-го списка [1, 2, 3]
b[-1][-1] # Получение последнего элемента "9" из последнего списка [7, 8, 9]

# Методы


help(list) # Информация о списках
a = [1, 1, 3, 1]
a.count(1) # 3. Возвращает сколько раз в списке встретилось передаваемое значение. В примере вернётся 3, так как в списке три единицы.
a = [1, 2, 3]
a.copy() # [1, 2, 3]. Возвращает копию списка. Это удобно, чтобы скопировать данные в новую переменную и изменять значения уже в новой переменной, чтобы значения в старой переменной не изменились.
a = [1, 2, 3]
a.reverse() # Полностью переворачивает список. Теперь "а" [3, 2, 1]
a = [2, 1, 3]
a.sort() # Cортирует значения в списке в порядке ВОЗРАСТАНИЯ. Теперь "а" [1, 2, 3]
a = [2, 1, 3]
a.sort(reverse=True) # Сортирует значения в списке в порядке УБЫВАНИЯ. Теперь "а" [3, 2, 1]

# Практические моменты

а = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] # Можно так
b = [[0] * 3] * 3 # А можно так. Только в этом случае есть небольшая особенность.
a[0][0] = 1 # Здесь всё будет как и планировалось. "а" [[1, 0, 0], [0, 0, 0], [0, 0, 0]]
b[0][0] = 1 # А здесь, не так как планировалось. "b" [[1, 0, 0], [1, 0, 0], [1, 0, 0]]